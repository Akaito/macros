{"_id":"D38Cw70PsNaaQicv","name":"Tool Proficiency","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"/**\n * Grab a list of tools in the selected player's inventory, then all the user to make a roll on the tool.\n * Will take into consideration if the player is proficient in using the tool.\n */\n\n// get the first entry from the array of currently selected tokens. Works best/exclusively with one selected token\nconst target = canvas.tokens.controlled[0].actor;\n// get the abilities of the selected token for ease of access later\nconst { abilities } = target.data.data;\n// Only items set as \"tools\" will be included!\n// get all held and equipped Tools/Kits/Supplies. Might want to replace with /[tT]ools|[kK]it|[sS]upplies|[sS]et$/ if gaming sets should be included\nconst toolsInInventory = target.items.filter( item => item.name.match(/[tT]ools|[kK]it|[sS]upplies$/) && item.data.data.hasOwnProperty(\"proficient\"));\n// const toolProficiencies = target.data.data.traits.toolProf; // Tools have proficiency mod in the object under <item>.data.data.proficient. \nlet tool = undefined;\n\n// Choose ability mod dialog\nconst abilityDialog = (async () => {\n    let template = `\n    <div>\n        <div class=\"form-group\">\n            <label>Choose ability</label>\n            <select id=\"selectedAbility\">`\n    for (let ability in abilities) {\n        switch (ability) {\n            case \"str\":\n                abilities[ability].name = \"Strength\"\n                break;\n            case \"dex\":\n                abilities[ability].name = \"Dexterity\"\n                break;\n            case \"con\":\n                abilities[ability].name = \"Constitution\"\n                break;\n            case \"int\":\n                abilities[ability].name = \"Intelligence\"\n                break;\n            case \"wis\":\n                abilities[ability].name = \"Wisdom\"\n                break;\n            case \"cha\":\n                abilities[ability].name = \"Charisma\"\n                break;\n            default:\n                console.log(\"something went wrong\");\n        }\n        template += `<option value=\"${ability}\">${abilities[ability].name} (${abilities[ability].value})</option>`;\n    }\n    template += `</select>\n        </div>\n    </div>`\n\n\n    new Dialog({\n        title: tool.name,\n        content: template,\n        buttons: {\n            ok: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"OK\",\n                callback: async (html) => {\n                    const selection = html.find(\"#selectedAbility\")[0].value;\n                    console.log(tool, target);\n                    let prof = tool.data.data.proficient * target.data.data.attributes.prof; // target might be half or doubly proficient. This will make sure it is accounted for\n\n                    let messageContent = `${target.name} rolled a <b>[[1d20+${abilities[selection].mod}(${abilities[selection].name})+${prof}(Proficiency)]]</b> for the ${tool.name} check.<br>`;\n                    let chatData = {\n                        user: game.user.id,\n                        speaker: ChatMessage.getSpeaker(),\n                        content: messageContent,\n                        // uncomment the line below to always whisper the roll to the GM\n                        // whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n                    };\n                    ChatMessage.create(chatData, {});\n               }\n            },\n            cancel: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: 'Cancel'\n            }\n        },\n        default: \"cancel\"\n    }).render(true);\n})\n\n// Choose tool dialog\nif (toolsInInventory.length) {\n    (async () => {\n        let template = `\n        <div>\n            <div class=\"form-group\">\n                <label>Choose a tool</label>\n                <select id=\"selectedTool\">`\n        toolsInInventory.forEach( tempTool => {    \n            template += `<option value=\"${tempTool.name}\">${tempTool.name}</option>`;\n        });\n        template += `</select>\n            </div>\n        </div>`;\n\n        new Dialog({\n            title: 'Which tool?',\n            content: template,\n            buttons: {\n                ok: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: \"OK\",\n                    callback: async (html) => {\n                        let selection = html.find(\"#selectedTool\")[0].value;\n                        tool = toolsInInventory.find( item => item.name === selection )\n                        abilityDialog();\n                   }\n                },\n                cancel: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: 'Cancel'\n                }\n            },\n            default: \"cancel\"\n        }).render(true);\n    })()    \n}\n\nelse {\n    new Dialog({\n        title: 'No Tools!',\n        content: '<p>You don\\'t seem to have any tool with you.</p>',\n        buttons: {\n            ok: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"OK\"\n            }\n        },\n        default: \"ok\"\n    }).render(true);\n}\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"mFFE3IauEDuuY3pQ","name":"Equip Unequip Shield","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"/**\n * Equips or unequips an item named 'Shield'. Then updates the character's AC.\n * Author: ^ and stick#0520\n */\n\nlet charData = game.user.character;\nlet shield = charData.items.find(i => i.name == 'Shield');\n\nif (shield != null)\n{\n   let item = game.user.character.getOwnedItem(shield._id);\n   let attr = \"data.equipped\";\n   item.update({[attr]: !getProperty(item.data, attr)});\n\n   if (getProperty(item.data, attr)) {\n      charData.update({\"data.attributes.ac.value\": charData.data.data.attributes.ac.value-2});\n   } else {\n      charData.update({\"data.attributes.ac.value\": charData.data.data.attributes.ac.value+2});\n   }\n}\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"mFFE3IauEDuuY3pQ","name":"Equip Unequip Shield","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"/**\n * Equips/unequips an item. Make sure you change the variables at the top (as required).\n * This script will also error check to make sure items exist and tokens are select. \n * Chat and token icon display options can be set as desired.\n * Author: Zapgun\n */\n\nlet itemName = 'Shield'; // <--- Change this to the *exact* item name (capitals count!)\nlet sendToChat = true; // <--- Change to 'true' or 'false' to display a chat message about equipping\nlet displayIcon = true; // <--- Change to 'true' or 'false' to display an effect icon when equipped\nconst effectIconPath = 'icons/svg/shield.svg'; // <--- Add the effect icon you want to appear when equipped\n\nlet toggleResult = false;\n\nif (!actor) {\n    ui.notifications.warn('You need to select a token before using this macro!');\n} else {\n\n\tlet myItem = actor.items.find(i => i.name == itemName);\n\tif (myItem != null)\n\t{\n\t\tlet item = actor.getOwnedItem(myItem._id);\n\t\tlet attr = \"data.equipped\";\n\t\tlet equipped = getProperty(item.data, attr);\n\t\tif (sendToChat) {\t\t\t\n\t\t\tif (!equipped) {\n\t\t\t\tchatMessage(actor.name + ' <b>equips</b> their <i>' + ' ' + itemName+ '</i>');\n\t\t\t} else {\n\t\t\t\tchatMessage(actor.name + ' <b>un-equips</b> their <i>' + ' ' + itemName + '</i>');\t\t\t\n\t\t\t}\n\t\t}\n\t\titem.update({[attr]: !getProperty(item.data, attr)});\n\t\t\n\t\t// mark/unmark character's token with an effect icon when displayToken is true\n\t\t(async () => { \n\t\t\tif (displayIcon) {\n\t\t\t\ttoggleResult = await token.toggleEffect(effectIconPath);\n\t\t\t\tif (toggleResult == equipped) token.toggleEffect(effectIconPath);  \n\t\t\t}\n\t\t})();\n\t\t\n\t} else {\n\t\tui.notifications.warn(\"No item named '\" + itemName + \"' found on character!\");\n\t}\n}\n\nfunction chatMessage(messageContent) {\n\t// create the message\n\tif (messageContent !== '') {\n\t\tlet chatData = {\n\t\t\tuser: game.user._id,\n\t\t\tspeaker: ChatMessage.getSpeaker(),\n\t\t\tcontent: messageContent,\n\t\t};\n\t\tChatMessage.create(chatData, {});\n\t}\n}","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
