{"_id":"Cro7DdjJpepCX22U","name":"Light Picker","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"let dialogEditor = new Dialog({\n  title: `Token Light Picker`,\n  content: `Pick the light source the selected token is holding.`,\n  buttons: {\n    none: {\n      label: `None`,\n      callback: () => {\n        token.update({\"dimLight\": 0, \"brightLight\": 0, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    torch: {\n      label: `Torch`,\n      callback: () => {\n        token.update({\"dimLight\": 40, \"brightLight\": 20, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    lamp: {\n      label: `Lamp`,\n      callback: () => {\n        token.update({\"dimLight\": 45, \"brightLight\": 15, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    bullseye: {\n      label: `Bullseye Lantern`,\n      callback: () => {\n        token.update({\"dimLight\": 120, \"brightLight\": 60, \"lightAngle\": 45,});\n        dialogEditor.render(true);\n      }\n    },\n    hoodedOpen: {\n      label: `Hooded Lantern (Open)`,\n      callback: () => {\n        token.update({\"dimLight\": 60, \"brightLight\": 30, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    hoodedClosed: {\n      label: `Hooded Lantern (Closed)`,\n      callback: () => {\n        token.update({\"dimLight\": 5, \"brightLight\": 0, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\ndialogEditor.render(true)","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"F4KqUssiXZNULUFU","name":"Mirror Token Image","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"// Flips the selected token image along the Y axis.\n// Change mirrorY to mirrorX to flip across the X axis\nfor ( let token of canvas.tokens.controlled ) {\n  let flip = !token.data.mirrorY || false;\n  token.update({mirrorY: flip});\n};","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"XrxqpluWdtnNLlmq","name":"Shrink Or Enlarge","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"// Update selected tokens to flip between a 1x1 or a 2x2 grid.\n\nfor (let token of canvas.tokens.controlled) {\n  let newSize = (token.data.height == 1 && token.data.width == 1) ? 2 : 1;\n  token.update({\n    height: newSize,\n    width: newSize\n  });\n};","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"fnMfRlpMvuk92hU0","name":"Switch Images","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"// Allows swapping between two different .png images.\n// Token sides should have \"a\" and \"b\" at the end of the name like \"name-a.png\" and \"name-b.png\".\n// If you have a different ending, change aName and bName respectively.\n// Author: Phenomen\n\n// IMPORTANT. These two values MUST be the same length.\nlet aName = 'a.png'\nlet bName = 'b.png'\n\nlet tok = canvas.tokens.controlled[0];\nlet img = tok.data.img;\nvar currentSide = img[img.length - aName.length];\nimg = img.slice(0,-Math.abs(aName.length)) + (currentSide == 'a' ? bName: aName);\ntok.update({ img });","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"i4DFVd2HhEOreW2x","name":"Token Vision Config - About Time","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"// A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings, based on lighting sources from D&D 5e. Has a dependency on About Time by Tim Posney.\n\nif (canvas.tokens.controlled.length === 0)\n  ui.notifications.error(\"Please select a token\");\n\nlet namedfields = (...fields) => {\n  return (...arr) => {\n    var obj = {};\n    fields.forEach((field, index) => {\n      obj[field] = arr[index];\n    });\n    return obj;\n  };\n};\n\n// Very ugly automated construction below. DRY, but at what cost?\nlet VisionType = namedfields('name', 'dim', 'bright');\nvar visions = (() => {\n  return [\n    VisionType('Leave Unchanged', null, null),\n    VisionType('Self', 5, 0),\n    VisionType('Devil\\'s Sight', 0, 120)\n  ].concat(...[...Array(6).keys()].map(x => (x+1)*30).map(n => {\n    return VisionType(`Darkvision (${n} feet)`, n, 0);\n  }));\n})();\n\nlet LightSource = namedfields('name', 'dim', 'bright', 'angle', 'lockRotation')\nvar lightSources = [\n  LightSource('Leave Unchanged', null, null, null, null),\n  LightSource('None', 0, 0, 360, null),\n  LightSource('Candle', 10, 5, 360, null),\n  LightSource('Torch / Light Cantrip', 40, 20, 360, null),\n  LightSource('Lamp', 45, 15, 360, null),\n  LightSource('Hooded Lantern', 60, 30, 360, null),\n  LightSource('Hooded Lantern (Dim)', 5, 0, 360, null),\n  LightSource('Bullseye Lantern', 120, 60, 52.5, false)\n];\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Token Vision Configuration`,\n  content: `\n<form>\n  <div class=\"form-group\">\n    <label>Vision Type:</label>\n    <select id=\"vision-type\" name=\"vision-type\">\n      ${\n        visions.map((vision, index) => {\n          return `\\t<option value=${index}>${vision.name}</option>`;\n        }).join('\\n')\n      }\n    </select>\n  </div>\n  <div class=\"form-group\">\n    <label>Light Source:</label>\n    <select id=\"light-source\" name=\"light-source\">\n      ${\n        lightSources.map((lightSource, index) => {\n          return `\\t<option value=${index}>${lightSource.name}</option>`;\n        }).join('\\n')\n      }\n    </select>\n  </div>\n  <div class=\"form-group\">\n    <label>Duration in Minutes:</label>\n    <input type=\"number\" id=\"duration\" name=\"duration\" min=\"0\">\n  </div>\n</form>\n`,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        let visionIndex = parseInt(html.find('[name=\"vision-type\"]')[0].value) || 0;\n        let lightIndex = parseInt(html.find('[name=\"light-source\"]')[0].value) || 0;\n        let duration = parseInt(html.find('[name=\"duration\"]')[0].value) || 0;\n\n        if (duration > 0) {\n          if (game.modules.get(\"about-time\").active != true) {\n            ui.notifications.error(\"About Time isn't loaded\");\n          } else {\n            ((backup) => {\n              game.Gametime.doIn({minutes:Math.floor(3 * duration / 4)}, () => {\n                ChatMessage.create({\n                  user: game.user._id,\n                  content: \"The fire burns low...\",\n                  speaker: speaker\n                }, {});\n              });\n            })(Object.assign({}, token.data));\n            ((backup) => {\n              game.Gametime.doIn({minutes:duration}, () => {\n                ChatMessage.create({\n                  user: game.user._id,\n                  content: \"The fire goes out, leaving you in darkness.\",\n                  speaker: speaker\n                }, {});\n                token.update({\n                  vision: true,\n                  dimSight: backup.dimSight,\n                  brightSight: backup.brightSight,\n                  dimLight: backup.dimLight,\n                  brightLight:  backup.brightLight,\n                  lightAngle: backup.lightAngle,\n                  lockRotation: backup.lockRotation\n                });\n              });\n            })(Object.assign({}, token.data));\n          }\n        }\n\n        // Configure new token vision\n        let dimSight = visions[visionIndex].dim ?? token.data.dimSight;\n        let brightSight = visions[visionIndex].bright ?? token.data.brightSight;\n        let dimLight = lightSources[lightIndex].dim ?? token.data.dimLight;\n        let brightLight = lightSources[lightIndex].bright ?? token.data.brightLight;\n        let lightAngle = lightSources[lightIndex].angle ?? token.data.lightAngle;\n        let lockRotation = lightSources[lightIndex].lockRotation ?? token.data.lockRotation;\n\n        // Update Token\n        console.log(token);\n        token.update({\n          vision: true,\n          dimSight: dimSight,\n          brightSight: brightSight,\n          dimLight: dimLight,\n          brightLight:  brightLight,\n          lightAngle: lightAngle,\n          lockRotation: lockRotation\n        });\n      }\n    }\n  }\n}).render(true);\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Token Vision Configuration","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"chat","flags":{},"scope":"global","command":"// A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings. This script is taken from Sky's foundry repo here: https://github.com/Sky-Captain-13/foundry/blob/master/scriptMacros/tokenVision.js.\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Token Vision Configuration`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Vision Type:</label>\n        <select id=\"vision-type\" name=\"vision-type\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"dim0\">Self</option>\n          <option value=\"dim30\">Darkvision (30 ft)</option>\n          <option value=\"dim60\">Darkvision (60 ft)</option>\n          <option value=\"dim90\">Darkvision (90 ft)</option>\n          <option value=\"dim120\">Darkvision (120 ft)</option>\n          <option value=\"dim150\">Darkvision (150 ft)</option>\n          <option value=\"dim180\">Darkvision (180 ft)</option>\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Light Source:</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"none\">None</option>\n          <option value=\"candle\">Candle</option>\n          <option value=\"lamp\">Lamp</option>\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\n          <option value=\"light\">Light (Cantrip)</option>\n          <option value=\"torch\">Torch</option>\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n        let dimSight = 0;\n        let brightSight = 0;\n        let dimLight = 0;\n        let brightLight = 0;\n        let lightAngle = 360;\n        let lockRotation = token.data.lockRotation;\n        // Get Vision Type Values\n        switch (visionType) {\n          case \"dim0\":\n            dimSight = 0;\n            brightSight = 0;\n            break;\n          case \"dim30\":\n            dimSight = 30;\n            brightSight = 0;\n            break;\n          case \"dim60\":\n            dimSight = 60;\n            brightSight = 0;\n            break;\n          case \"dim90\":\n            dimSight = 90;\n            brightSight = 0;\n            break;\n          case \"dim120\":\n            dimSight = 120;\n            brightSight = 0;\n            break;\n          case \"dim150\":\n            dimSight = 150;\n            brightSight = 0;\n            break;\n          case \"dim180\":\n            dimSight = 180;\n            brightSight = 0;\n            break;\n          case \"bright120\":\n            dimSight = 0;\n            brightSight= 120;\n            break;\n          case \"nochange\":\n          default:\n            dimSight = token.data.dimSight;\n            brightSight = token.data.brightSight;\n        }\n        // Get Light Source Values\n        switch (lightSource) {\n          case \"none\":\n            dimLight = 0;\n            brightLight = 0;\n            break;\n          case \"candle\":\n            dimLight = 10;\n            brightLight = 5;\n            break;\n          case \"lamp\":\n            dimLight = 45;\n            brightLight = 15;\n            break;\n          case \"bullseye\":\n            dimLight = 120;\n            brightLight = 60;\n            lockRotation = false;\n            lightAngle = 52.5;\n            break;\n          case \"hooded-dim\":\n            dimLight = 5;\n            brightLight = 0;\n            break;\n          case \"hooded-bright\":\n            dimLight = 60;\n            brightLight = 30;\n            break;\n          case \"light\":\n            dimLight = 40;\n            brightLight = 20;\n            break;\n          case \"torch\":\n            dimLight = 40;\n            brightLight = 20;\n            break;\n          case \"nochange\":\n          default:\n            dimLight = token.data.dimLight;\n            brightLight = token.data.brightLight;\n            lightAngle = token.data.lightAngle;\n            lockRotation = token.data.lockRotation;\n        }\n        // Update Token\n        console.log(token);\n        token.update({\n          vision: true,\n          dimSight: dimSight,\n          brightSight: brightSight,\n          dimLight: dimLight,\n          brightLight:  brightLight,\n          lightAngle: lightAngle,\n          lockRotation: lockRotation\n        });\n      }\n    }\n  }\n}).render(true);\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"jBcKwGUwHS2V6nat"}
{"name":"Token Multi Select","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"/*\nSwap the selected token with another of similar name via a\ndrop-down menu in a dialog box.\n\nTokens for each character should be named similarly but end with\n'_walking.png', '_fighting.png', and '_sneaking.png'. For example,\n'talion_walking.png', 'talion_fighting.png', and 'talion_sneaking.png'\n\nIf a token does not exist, mystery man will be automatically selected.\n*/\n\nif (actor !== undefined && actor !== null) {\n  let d = new Dialog({\n    title: 'Token Mogrifier',\n    content: \"<p>Select a new token</p>\" +\n      \"<select name='token' id='token'>\" +\n        \"<option value='_walking.png'>Walking</option>\" +\n        \"<option value='_fighting.png'>Fighting</option>\" +\n        \"<option value='_sneaking.png'>Sneaking</option>\" +\n        \"<option value='_unconscious.png'>Unconscious</option>\" +\n      \"</select>\",\n    buttons: {\n      ok: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: \"Do it!\",\n        callback: () =>\n          token.update({\n            img: token.data.img.slice(0, token.data.img.lastIndexOf('_')) + document.getElementById(\"token\").value\n          })\n      },\n      cancel: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: \"Nevermind\",\n        callback: () => {}\n      }\n    }\n  });\n  d.render(true);\n} else {\n  ui.notifications.warn(\"Please select a token.\");\n}\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"p8daoiwkQPAnOJNm"}
