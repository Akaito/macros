{"name":"Switch Images","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"chat","flags":{},"scope":"global","command":"// Allows swapping between two different .png images.\n// Token sides should have \"a\" and \"b\" at the end of the name like \"name-a.png\" and \"name-b.png\".\n// If you have a different ending, change aName and bName respectively.\n// Author: Phenomen\n\n// IMPORTANT. These two values MUST be the same length.\nlet aName = 'a.png'\nlet bName = 'b.png'\n\nlet tok = canvas.tokens.controlled[0];\nlet img = tok.data.img;\nvar currentSide = img[img.length - aName.length];\nimg = img.slice(0,-Math.abs(aName.length)) + (currentSide == 'a' ? bName: aName);\ntok.update({ img });","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"fnMfRlpMvuk92hU0"}
{"name":"Token Vision Config","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"chat","flags":{},"scope":"global","command":"// A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings, based on lighting sources from D&D 5e. Has a dependency on About Time by Tim Posney.\n\nif (canvas.tokens.controlled.length === 0)\n  ui.notifications.error(\"Please select a token\");\n\nif (game.modules.get(\"about-time\").active != true)\n  ui.notifications.error(\"About Time isn't loaded\");\n\nlet namedfields = (...fields) => {\n  return (...arr) => {\n    var obj = {};\n    fields.forEach((field, index) => {\n      obj[field] = arr[index];\n    });\n    return obj;\n  };\n};\n\n// Very ugly automated construction below. DRY, but at what cost?\nlet VisionType = namedfields('name', 'dim', 'bright');\nlet visions = (() => {\n  return [\n    VisionType('Leave Unchanged', null, null),\n    VisionType('Self', 5, 0),\n    VisionType('Devil\\'s Sight', 0, 120)\n  ].concat(...[...Array(6).keys()].map(x => (x+1)*30).map(n => {\n    return VisionType(`Darkvision (${n} feet)`, n, 0);\n  }));\n})();\n\nlet LightSource = namedfields('name', 'dim', 'bright', 'angle', 'lockRotation')\nlet lightSources = [\n  LightSource('Leave Unchanged', null, null, null, null),\n  LightSource('None', 0, 0, 360, null),\n  LightSource('Candle', 10, 5, 360, null),\n  LightSource('Torch / Light Cantrip', 40, 20, 360, null),\n  LightSource('Lamp', 45, 15, 360, null),\n  LightSource('Hooded Lantern', 60, 30, 360, null),\n  LightSource('Hooded Lantern (Dim)', 5, 0, 360, null),\n  LightSource('Bullseye Lantern', 120, 60, 52.5, false)\n];\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Token Vision Configuration`,\n  content: `\n<form>\n  <div class=\"form-group\">\n    <label>Vision Type:</label>\n    <select id=\"vision-type\" name=\"vision-type\">\n      ${\n        visions.map((vision, index) => {\n          return `\\t<option value=${index}>${vision.name}</option>`;\n        }).join('\\n')\n      }\n    </select>\n  </div>\n  <div class=\"form-group\">\n    <label>Light Source:</label>\n    <select id=\"light-source\" name=\"light-source\">\n      ${\n        lightSources.map((lightSource, index) => {\n          return `\\t<option value=${index}>${lightSource.name}</option>`;\n        }).join('\\n')\n      }\n    </select>\n  </div>\n  <div class=\"form-group\">\n    <label>Duration in Minutes:</label>\n    <input type=\"number\" id=\"duration\" name=\"duration\" min=\"0\">\n  </div>\n</form>\n`,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        let visionIndex = html.find('[name=\"vision-type\"]')[0].value || null;\n        let lightIndex = html.find('[name=\"light-source\"]')[0].value || null;\n        let duration = html.find('[name=\"duration\"]')[0].value || 0;\n\n        if (duration > 0) {\n          ((backup) => {\n            game.Gametime.doIn({minutes:Math.floor(3 * duration / 4)}, () => {\n              ChatMessage.create({\n                user: game.user._id,\n                content: \"The fire burns low...\",\n                speaker: speaker\n              }, {});\n            });\n            game.Gametime.doIn({minutes:duration}, () => {\n              ChatMessage.create({\n                user: game.user._id,\n                content: \"The fire goes out, leaving you in darkness.\",\n                speaker: speaker\n              }, {});\n              token.update({\n                vision: true,\n                dimSight: backup.dimSight,\n                brightSight: backup.brightSight,\n                dimLight: backup.dimLight,\n                brightLight:  backup.brightLight,\n                lightAngle: backup.lightAngle,\n                lockRotation: backup.lockRotation\n              });\n            });\n          })(Object.assign({}, token.data));\n        }\n\n        // Configure new token vision\n        let dimSight = visions[visionIndex].dim ?? token.data.dimSight;\n        let brightSight = visions[visionIndex].bright ?? token.data.brightSight;\n        let dimLight = lightSources[lightIndex].dim ?? token.data.dimLight;\n        let brightLight = lightSources[lightIndex].bright ?? token.data.brightLight;\n        let lightAngle = lightSources[lightIndex].angle ?? token.data.lightAngle;\n        let lockRotation = lightSources[lightIndex].lockRotation ?? token.data.lockRotation;\n\n        // Update Token\n        console.log(token);\n        token.update({\n          vision: true,\n          dimSight: dimSight,\n          brightSight: brightSight,\n          dimLight: dimLight,\n          brightLight:  brightLight,\n          lightAngle: lightAngle,\n          lockRotation: lockRotation\n        });\n      }\n    }\n  }\n}).render(true);\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"i4DFVd2HhEOreW2x"}
{"name":"Flip Token Image","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"chat","flags":{},"scope":"global","command":"// Flips the selected token image along the Y axis.\n// Change mirrorY to mirrorX to flip across the X axis\nfor ( let token of canvas.tokens.controlled ) {\n  let flip = !token.data.mirrorY || false;\n  token.update({mirrorY: flip});\n};","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"F4KqUssiXZNULUFU"}
{"_id":"F4KqUssiXZNULUFU","name":"Mirror Token Image","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"chat","flags":{},"scope":"global","command":"// Flips the selected token image along the Y axis.\n// Change mirrorY to mirrorX to flip across the X axis\nfor ( let token of canvas.tokens.controlled ) {\n  let flip = !token.data.mirrorY || false;\n  token.update({mirrorY: flip});\n};","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Token Light Picker","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"chat","flags":{},"scope":"global","command":"let dialogEditor = new Dialog({\n  title: `Token Light Picker`,\n  content: `Pick the light source the selected token is holding.`,\n  buttons: {\n    none: {\n      label: `None`,\n      callback: () => {\n        token.update({\"dimLight\": 0, \"brightLight\": 0, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    torch: {\n      label: `Torch`,\n      callback: () => {\n        token.update({\"dimLight\": 40, \"brightLight\": 20, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    lamp: {\n      label: `Lamp`,\n      callback: () => {\n        token.update({\"dimLight\": 45, \"brightLight\": 15, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    bullseye: {\n      label: `Bullseye Lantern`,\n      callback: () => {\n        token.update({\"dimLight\": 120, \"brightLight\": 60, \"lightAngle\": 45,});\n        dialogEditor.render(true);\n      }\n    },\n    hoodedOpen: {\n      label: `Hooded Lantern (Open)`,\n      callback: () => {\n        token.update({\"dimLight\": 60, \"brightLight\": 30, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    hoodedClosed: {\n      label: `Hooded Lantern (Closed)`,\n      callback: () => {\n        token.update({\"dimLight\": 5, \"brightLight\": 0, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\ndialogEditor.render(true)","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"Cro7DdjJpepCX22U"}
{"_id":"Cro7DdjJpepCX22U","name":"Light Picker","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"chat","flags":{},"scope":"global","command":"let dialogEditor = new Dialog({\n  title: `Token Light Picker`,\n  content: `Pick the light source the selected token is holding.`,\n  buttons: {\n    none: {\n      label: `None`,\n      callback: () => {\n        token.update({\"dimLight\": 0, \"brightLight\": 0, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    torch: {\n      label: `Torch`,\n      callback: () => {\n        token.update({\"dimLight\": 40, \"brightLight\": 20, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    lamp: {\n      label: `Lamp`,\n      callback: () => {\n        token.update({\"dimLight\": 45, \"brightLight\": 15, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    bullseye: {\n      label: `Bullseye Lantern`,\n      callback: () => {\n        token.update({\"dimLight\": 120, \"brightLight\": 60, \"lightAngle\": 45,});\n        dialogEditor.render(true);\n      }\n    },\n    hoodedOpen: {\n      label: `Hooded Lantern (Open)`,\n      callback: () => {\n        token.update({\"dimLight\": 60, \"brightLight\": 30, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    hoodedClosed: {\n      label: `Hooded Lantern (Closed)`,\n      callback: () => {\n        token.update({\"dimLight\": 5, \"brightLight\": 0, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\ndialogEditor.render(true)","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
